
Rough draft of essential documentation...

Compiling mfit
==============

The following commands assume that 'f90' invokes the Sun Workshop f90/f95
compiler, and that the 'pgplotlink' command is somewhere in the path.

[On the Cavendish Astrophysics Sun systems, the pgplotlink
shell script sends the following to standard output:

 -L/usr/local/lib -lpgplot -L/usr/openwin/lib -lX11
]

f90 -c -dalign maths.f90
f90 -c -dalign visibility.f90
f90 -c -dalign fit.f90
f90 -c -dalign inout.f90
f90 -c -dalign plot.f90
f90 -c -dalign model.f90
f90 -c -dalign gamma.f
f90 -c -dalign rjbesl.f
f90 -o mfit main.f90 maths.o visibility.o fit.o inout.o plot.o model.o gamma.o
rjbesl.o -dalign `pgplotlink` -lpda -lemsf -lems -lcnf -lf77compat

The '-lpda -lemsf -lems -lcnf' arguments are needed to link all the components
of the Starlink PDA library. The resulting executable will be called 'mfit'.


Running mfit
============

Assuming the executable is somewhere in the path, type 'mfit' at the shell
prompt. The program is interactive, and will prompt for input. Hopefully the
prompts are self-explanatory.


Data files
==========

The program will read the following types of data file (refer to COAST data
reduction documentation):

.vis	    Old analyse format (no errors on data points), visibility
            amplitudes only

.nvis	    New analyse format (errors on data points), visibility
            amplitudes only

.mapdat	    Can contain (squared) visibility amplitudes and/or triple products


Both .vis and .nvis files contain *signed* visibility amplitudes. The models
fit by analyse are all centro-symmetric, hence have purely real visibilities,
so you are supposed to assign appropriate signs (ideally using contemporaneous
closure phase data) to sqrt(V^2) values when constructing a vis or nvis file.

mfit ignores these signs and works with squared visibilities. You should put
any closure phase measurements in explicitly (you will need to create a mapdat
file for this).

The capability to read the OI Exchange format
(see http://www.mrao.cam.ac.uk/~jsy1001/exchange/) will be added to mfit later.


Model file format
=================

The program reads through the model file until it comes across the keyword
'source' at the begining of a line. It then reads the next 2 words as the
source name.  There must be 2 words present like 'alp' 'Ori' etc.

The program then reads in the various components of the model. It runs through
the model file until it comes across the keyword "component" at the begining of
the line. It then reads the data for that particular component: N.B. to
disregard a component simply replace "component" with "!component" etc - it
will then be ignored as the keyword marking a component info block.

Component data must follow this prescription: keyword is present on the start
of the line followed by the values associated with it.

Maximum number of components is set to 10.  Maximum order of taylor and
gauss-hermite LD types is also set to 10.

Keyword            Parameter information
-------            ---------------------

name     	   A one word name for the component itself, e.g. 'main' or 
		   'hot_spot' or something.

shape_type         One word specifying the shape of the component can have 
		   either 'ellipse' 'disc' or 'point' obviously corresponding
		   to elliptical, circular or unresolved point objects.

ld_type            One word specifying limb darkening type of the component, 
	           'uniform', 'taylor', 'hestroffer', 'square-root', 
	           'gauss-hermite' or 'gaussian'. Hankel transform functions 
		   all as defined in the maths work. if 'point' is specified 
	           as the shape_type then nothing should be put here.

ld_order           A single integer (1-10) specifying the order the limb 
		   darkening in the 'taylor' and 'gauss-hermite' LD cases.
                   nothing should be put in other cases.

position           Two double precision numbers follow describing the position
                   of the component with respect to the chosen phase reference
                   point. This is only important for multiple component models
		   since for a single component position corresponds to simple 
		   phase factor.
	           First number is the polar radius r of the component in mas
                   second num is the polar angle theta in deg (measured N>E as
                   in citvlb stuff)

position_prior     Two double precision numbers giving the prior widths for 
                   the position data above (prior assumed gaussian of standard
                   deviation = prior width)

flux               One double precision number giving the flux B of the source.
                   visibilties are always normalised so that unit visibility is
                   obtained on zero baselines therfore flux is a relative 
                   quantitity and has no meaning for a single component model.

flux_prior         One double precision number giving prior width on the flux

shape_param        Up to three double precision numbers giving shape info.
                   if 'point' is the shape type nothing should be put here.
                   if 'disc' is the shape type only one number should be put,
                   the diameter, a, of the disc in mas. ("diameter" is defined 
                   slightly differently depending on the limb darkening model,
                   e.g. it is FWHM for gaussian - see the maths stuff).
                   if 'ellipse' is the shape type all three numbers are needed
                   giving the major axis, a, in mas, the orientation, phi, of 
		   the major axis (measured N>E as in citvlb stuff) in degrees 
		   and the eccentricity factor epsilon

shape_param_prior  A prior for each of the numbers given above

ld_param           Up to twenty limb darkening parameters should be put here.
                   For 'uniform' 'prior' and 'gaussian' LD types nothing should
                   be here. 
		   For 'hestroffer' only one paramter, the hestroffer 
		   parameter "alpha" should be put. 
		   For 'square-root' only parameters - the "alpha" and "beta"
                   coefficients of (1-mu) and (1-root(mu)) should be put.
                   'gauss-hermite' and 'taylor' cases require the same number
                   of parameters as specified in the ld_order field above.

ld_param_prior     Prior widths associated with each number supplied above.


Illegal minimisations
=====================

Fitting is performed by attempting to minimise the negative logarithm of
posterior probability. Parameters with non-zero priors are considered to be
free parameters in the fitting process. The fitting routine will trigger an
error on the following "illegal" types of minimisation:

1. Attempting to fit a one component model with position angle theta and/or
   position radius r as free parameter(s)
2. Attempting to fit any components that have non-free position radius r 
   that is set to zero but have position angle theta as a free parameter 
   (if r is zero but free to be varied then this is okay)
3. Attempting to fit a one component model with flux B as a free parameter
4. Attempting to fit any elliptical components that have non-free eccentricity 
   set to unity but have orientation angle phi free to vary
5. Any model with no free parameters(!)
6. Attempting to fit non-centrosymmetric models to vis/nvis file types


Minimisation method
===================

The program attempts to minimise the unnormalised negative log posterior
probability (equal to the sum of the negative log prior and negative log
likelihood) of the model given the data. The data consist of any number of
squared-visibilities, triple product amplitudes, and triple product phases,
plus their Gaussian one-sigma errors.

The minimiser used is the routine PDA_UNCMND from the Starlink PDA library
(http://star-www.rl.ac.uk/star/docs/sun194.htx/sun194.html). This works better
than the simplex routine from Numerical Recipes that was used in the first
version of mfit.

From the book, "Numerical Methods and Software" by D. Kahaner, C. Moler,
S. Nash Prentice Hall, 1988:

     This routine uses a quasi-Newton algorithm with line search to
     minimize the function represented by the subroutine FCN [the
     negative log posterior].  At each iteration, the nonlinear
     function is approximated by a quadratic function derived from a
     Taylor series.  The quadratic function is minimized to obtain a
     search direction, and an approximate minimum of the nonlinear
     function along the search direction is found using a line search.
     The algorithm computes an approximation to the second derivative
     matrix of the nonlinear function using quasi-Newton techniques.

More information is available in the reference:

R.B. Schnabel, J.E. Koontz, and BE.E. Weiss, A modular system of algorithms for
unconstrained minimization, Report CU-CS-240-82, Comp. Sci. Dept., Univ. of
Colorado at Boulder, 1982.


Posterior, Goodness-of-fit
==========================

At the solution position the (unnormalised) negative log posterior is given
(i.e. it is sum of the negative log prior and negative log likelihood without
the addition of the negative log evidence). The chi squared value is also
reported:

     chi sqrd = sum { ( (data-model)/(error in data) )^2 }

The number of degrees of freedom (vis + triple data points - no of free
parameters) is reported along with the chi sqrd value divided by this. Note
that closure phases that are linear combinations of other measured closure
phases are incorrectly counted as independent data points.


Errors
======

The hessian matrix Hes[ij] = (d^2/(dxi*dxj))(-log posterior) is computed at the
solution point. Hessian elements are estimated using a numerical
differentiation method:

1. for on-diagonal elements H[ii] = (d^2/dxi^2)(-log posterior) the element
   is estimated to be:
   H[ii] = { P(x+dx) + P(x-dx) - 2P(x) }/dx^2
   where x = x[i] dx = delta.x[i]

2. for off-diagonal elements H[ij] = (d^2/(dxi.dxj))(-log posterior) the
   element is estimated to be:
   H[ij] = {P(x+dx,y+dy)+P(x-dx,y-dy)-P(x+dx,y-dy)-P(x-dx,y+dy)}/{4.dx.dy}
   where x=x[i] y=x[j]

The covariance matrix Cov[ij] is the inverted Hes matrix. Some problems appear
to arise where diagonal elements of the matrix, corresponding to the variances
in the parameters, are negative. This could possibly point to poorly chosen
priors or a poor fit/irregularities in the negative log posterior
surface. Where such negative values occur the program warns the user.

The correlation matrix Cor[ij] = Cov[ij] / sqrt { Var[i].Var[j] } is also
computed. n.b. Var[i] is defined as Cov[ii]. Problems arise in the case of
negative elements on the Cov diagonals i.e. negative Var[i]'s - in this case
the correlation matrix will be incomplete with mathematically illegal elements
set to zero.

The "hessian-based error" of a parameter is the square root of the variance in
the quantity.


Plotting
========

After each fit, the V^2 data points and the best-fit model values are plotted
against projected baseline length. The model values are calculated for
baselines oriented east-west.


Known deficiencies
==================

Other plot choices, and the ability to change the output device, should be
added. Flagged points should be ignored.

Mfit doesn't cope with pathnames containing more than a single dot (assumed to
separate the extension from the rest of the pathname).

Wavebands with the same lambda but different delta(lambda) are not
distinguished in mapdat files.


$Id: documentation,v 1.4 2002/11/18 10:28:58 jsy1001 Exp $

Local variables:
fill-column: 79
End:
